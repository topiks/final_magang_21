// Generated by gencpp from file final_project/pc2motor_posisi_msg.msg
// DO NOT EDIT!


#ifndef FINAL_PROJECT_MESSAGE_PC2MOTOR_POSISI_MSG_H
#define FINAL_PROJECT_MESSAGE_PC2MOTOR_POSISI_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace final_project
{
template <class ContainerAllocator>
struct pc2motor_posisi_msg_
{
  typedef pc2motor_posisi_msg_<ContainerAllocator> Type;

  pc2motor_posisi_msg_()
    : trg_x(0)
    , trg_y(0)
    , trg_theta(0)  {
    }
  pc2motor_posisi_msg_(const ContainerAllocator& _alloc)
    : trg_x(0)
    , trg_y(0)
    , trg_theta(0)  {
  (void)_alloc;
    }



   typedef int16_t _trg_x_type;
  _trg_x_type trg_x;

   typedef int16_t _trg_y_type;
  _trg_y_type trg_y;

   typedef int16_t _trg_theta_type;
  _trg_theta_type trg_theta;





  typedef boost::shared_ptr< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> const> ConstPtr;

}; // struct pc2motor_posisi_msg_

typedef ::final_project::pc2motor_posisi_msg_<std::allocator<void> > pc2motor_posisi_msg;

typedef boost::shared_ptr< ::final_project::pc2motor_posisi_msg > pc2motor_posisi_msgPtr;
typedef boost::shared_ptr< ::final_project::pc2motor_posisi_msg const> pc2motor_posisi_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::final_project::pc2motor_posisi_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::final_project::pc2motor_posisi_msg_<ContainerAllocator1> & lhs, const ::final_project::pc2motor_posisi_msg_<ContainerAllocator2> & rhs)
{
  return lhs.trg_x == rhs.trg_x &&
    lhs.trg_y == rhs.trg_y &&
    lhs.trg_theta == rhs.trg_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::final_project::pc2motor_posisi_msg_<ContainerAllocator1> & lhs, const ::final_project::pc2motor_posisi_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace final_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ca270828908c28e979eee07832d8d29";
  }

  static const char* value(const ::final_project::pc2motor_posisi_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ca270828908c28eULL;
  static const uint64_t static_value2 = 0x979eee07832d8d29ULL;
};

template<class ContainerAllocator>
struct DataType< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "final_project/pc2motor_posisi_msg";
  }

  static const char* value(const ::final_project::pc2motor_posisi_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 trg_x\n"
"int16 trg_y\n"
"int16 trg_theta\n"
;
  }

  static const char* value(const ::final_project::pc2motor_posisi_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trg_x);
      stream.next(m.trg_y);
      stream.next(m.trg_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pc2motor_posisi_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::final_project::pc2motor_posisi_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::final_project::pc2motor_posisi_msg_<ContainerAllocator>& v)
  {
    s << indent << "trg_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trg_x);
    s << indent << "trg_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trg_y);
    s << indent << "trg_theta: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trg_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINAL_PROJECT_MESSAGE_PC2MOTOR_POSISI_MSG_H
